// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Recipes;
//
//    var recipeClass = RecipeClass.FromJson(jsonString);

namespace Recipes
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RecipeClass
    {
        [JsonProperty("healthyFoods")]
        public HealthyFoods HealthyFoods { get; set; }

        [JsonProperty("nutriCalories")]
        public NutriCalories NutriCalories { get; set; }
    }

    public partial class HealthyFoods
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("ingredients")]
        public string Ingredients { get; set; }

        [JsonProperty("servings")]
        public string Servings { get; set; }

        [JsonProperty("instructions")]
        public string Instructions { get; set; }
    }

    public partial class NutriCalories
    {
        [JsonProperty("items")]
        public List<Item> Items { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("sugar_g")]
        public double SugarG { get; set; }

        [JsonProperty("fiber_g")]
        public double FiberG { get; set; }

        [JsonProperty("serving_size_g")]
        public long ServingSizeG { get; set; }

        [JsonProperty("sodium_mg")]
        public long SodiumMg { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("potassium_mg")]
        public long PotassiumMg { get; set; }

        [JsonProperty("fat_saturated_g")]
        public double FatSaturatedG { get; set; }

        [JsonProperty("fat_total_g")]
        public double FatTotalG { get; set; }

        [JsonProperty("calories")]
        public double Calories { get; set; }

        [JsonProperty("cholesterol_mg")]
        public long CholesterolMg { get; set; }

        [JsonProperty("protein_g")]
        public double ProteinG { get; set; }

        [JsonProperty("carbohydrates_total_g")]
        public long CarbohydratesTotalG { get; set; }
    }

    public partial class RecipeClass
    {
        public static RecipeClass FromJson(string json) => JsonConvert.DeserializeObject<RecipeClass>(json, Recipes.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this RecipeClass self) => JsonConvert.SerializeObject(self, Recipes.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
